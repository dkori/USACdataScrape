#scrape USAC 2015 data
rm(list=ls())
#https://data.usac.org/publicreports/Forms/Form471Detail/Index
require("readr")
require("dplyr")
require("RSelenium")
require("readxl")
require("RCurl")
require("XML")
require("rJava")
require("sqldf")

#states<-c("AK", "AL", "AR", "AS", "AZ", "CA", "CO", "CT", "DC", "DE", "FL", "GA", "GU", "HI", "IA", "ID", "IL", "IN", "KS", "KY", "LA", "MA", "MD", "ME", "MI", "MN", "MO", "MP", "MS", "MT", "NC", "ND", "NE", "NH", "NJ", "NM", "NV", "NY", "OH", "OK", "OR", "PA", "PR", "RI", "SC", "SD", "TN", "TX", "UT", "VA", "VI", "VT", "WA", "WI", "WV", "WY")
states<-0:55

#paste0(state)
#state<-1

date<-Sys.Date()
Sys.Date()
date<-"2018-05-02"
directory<-'/users/shared/2015_471_Download/'
#create a directory to store results, and a sub-directory for the state
system(paste0("mkdir ",directory))
system(paste0("mkdir ",directory,date))
directory<-paste0(directory,date)
port_num<-4572L

#create firefox profile that defines the download directory and never automatically stores file to disk
fprof <- makeFirefoxProfile(list(browser.download.dir = paste(directory)
                                 ,  browser.download.folderList = 2L
                                 , browser.download.manager.showWhenStarting = FALSE
                                 , browser.helperApps.neverAsk.saveToDisk = "application/zip"))
#if firefox doesn't work, chrome should
rD <- rsDriver(browser='firefox',port=port_num,extraCapabilities=fprof)
remDr <- rD$client
url<-"https://slweb.universalservice.org/form471publicdatatool/app/#/"
#iterate through states, download each one
for(state in states){
  
  
  
  #navigate to the download tool website
  
  remDr <- rD$client
  
  Sys.sleep(1)
  
  

  #navigate to USAC 471 download tool website  
  remDr$navigate(url)
  
  
  
  Sys.sleep(2)
  
  
  
  #print which state is being downloaded, for debugging purposes
  
  print(state)
  
  
  
  
  
  #sleep built in to allow page to load
  
  Sys.sleep(1)
  
  #state<-5
  
  #code below used to find the state dropdown box and control it
  
  state_path<-"//select[@name = 'StateCode']/option[@value="
  
  State_Str<-paste0(state_path,'"',state,'"',']')
  #State_Str<-paste0(state_path,state,']')
  #Version_Str<-paste(var,"'","2","'","]",sep="")
  
  Sys.sleep(1)
  
  #select state from dropdown
  
  StateElem <- remDr$findElement(using='xpath',State_Str)
  
  StateElem$clickElement()
  
  
  
  
  
  #click 'save' button
  
  searchID<-"btnSave"
  
  webElem<-remDr$findElement(using='name',value = searchID)
  
  webElem$clickElement()
  
  #change working directory to temp folder
  
  setwd(paste(directory))
  
  #check if the download is completed by checking if there is a ".part" file in the download directory
  
  Sys.sleep(2)
  
  check_part<-length(list.files(pattern="*.part"))
  
  
  
  while(check_part != 0){
    
    check_part<-length(list.files(pattern="*.part"))
    
  }
  
  Sys.sleep(1)
  
  
  
}

setwd(directory)
#store list of all the zip files just downloaded in "file_list"
file_list<-list.files(pattern='*.zip')
file_list
#iterate through all the downloaded zip files, load in the discount calculations, frn data, billing data, and item 21
require(readr)
#create blank list for each file  in the zip files (basic, discount rate, frn, etc.)
disc_list<-list()
frn_list<-list()
item21_list<-list()
allocation_list<-list()
basic_list<-list()
billing_list<-list()
#unzip each state, read in all the files, and append them to their respective blank lists
for(x in 1:length(file_list)){
  print(x)
  #store file names of all files in zip archive
  temp_list<-unzip(paste0(directory,'/',file_list[x]),list=TRUE)
  #create strings containing the file names 
  basic_str<-temp_list[grep('basic information',temp_list$Name,ignore.case=TRUE),1]
  billing_str<-temp_list[grep('billing',temp_list$Name,ignore.case=TRUE),1]
  discount_str<-temp_list[grep('discount',temp_list$Name,ignore.case=TRUE),1]
  frn_str<-temp_list[grep('funding request',temp_list$Name,ignore.case=TRUE),1]
  item21_str<-temp_list[grep('item 21 services',temp_list$Name,ignore.case=TRUE),1]
  allocation_str<-temp_list[grep('allocation',temp_list$Name,ignore.case=TRUE),1]
  disc_list[[x]]<-read_csv(unzip(paste0(directory,'/',file_list[x]),discount_str))
  frn_list[[x]]<-read_csv(unzip(paste0(directory,'/',file_list[x]),frn_str))
  item21_list[[x]]<-read_csv(unzip(paste0(directory,'/',file_list[x]),item21_str))
  basic_list[[x]]<-read_csv(unzip(paste0(directory,'/',file_list[x]),basic_str))
  billing_list[[x]]<-read_csv(unzip(paste0(directory,'/',file_list[x]),billing_str))
  #for some states, `Cat 2 Cost Alloc` is read in as an integer, so force it to be numeric
  allocation_list[[x]]<-read_csv(unzip(paste0(directory,'/',file_list[x]),allocation_str),
                                 col_types=cols(.default=col_guess(),`Cat 2 Cost Alloc`=col_number()))
}
#rbind all the files in each list
allocation<-do.call(rbind,allocation_list)
discount<-do.call(rbind,discount_list)
frn<-do.call(rbind,frn_list)
item21<-do.call(rbind,item12_list)
basic<-do.call(rbind,basic_list)
billing<-do.call(rbind,billing_list)

#create a folder for "complete flat files" to write each flat file to
system(paste0("mkdir ",directory,'/complete_flat_files'))
write_csv(allocation,paste0(directory,'/complete_flat_files','/allocation flat file.csv'))
write_csv(discount,paste0(directory,'/complete_flat_files','/discount flat file.csv'))
write_csv(frn,paste0(directory,'/complete_flat_files','/frn flat file.csv'))
write_csv(item21,paste0(directory,'/complete_flat_files','/item 21 flat file.csv'))
write_csv(basic,paste0(directory,'/complete_flat_files','/basic information flat file.csv'))
write_csv(billing,paste0(directory,'/complete_flat_files','/billing flat file.csv'))
